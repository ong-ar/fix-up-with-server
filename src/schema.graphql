type User {
  id: String!
  email: String!
  password: String!
}

type Invitation {
  id: String!
  invitedEmail: String!
}

type SomeOne {
  id: String!
  user: User!
  access: String!
  status: String!
  gender: String!
  age: Int!
  height: Int!
  company: String!
  etc: String
}

type SomeOnePhoto {
  id: String!
  photo: String!
}

type Reply {
  id: String!
  writer: User!
  content: String!
  createdAt: String!
  updatedAt: String!
}

type Chat {
  id: String!
  users: [User!]!
  messages: [Message!]!
}

type Message {
  id: String!
  text: String!
  user: User!
  chat: Chat!
}

enum accessType {
  ALL
  FOLLOW
  NOTHING
}

enum genderType {
  MALE
  FEMALE
}

enum companyType {
  LARGE
  MEDIUM
  FOREIGN
}

enum statusType {
  REQUEST
  COMPLETE
}

type Query {
  SomeOneProfile(id: String!): SomeOne!
  SomeOnePhoto(id: String!): [SomeOnePhoto!]!
  SomeOneReply(id: String!): [Reply!]!
  myProfile: User!
  myFollowing: [User!]!
  myFollowers: [User!]!
  myChats: [Chat!]!
  invite(id: String!): Invitation!
}

type Mutation {
  SomeOneRegister(access: accessType!, gender: genderType!, age: Int!, height: Int!, company: companyType!, etc: String!): Boolean!
  SomeOneUpdate(someone_id: String!, access: accessType!, gender: genderType!, age: Int!, height: Int!, company: companyType!, etc: String!): Boolean!
  SomeOneUpdateStatus(someone_id: String!, status: statusType!): Boolean!
  invite(email: String!): Boolean!
  signIn(email: String!, password: String!): String!
  signUp(id: String!, password: String!): Boolean!
}
